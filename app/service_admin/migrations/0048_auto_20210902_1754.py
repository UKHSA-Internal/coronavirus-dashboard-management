# Generated by Django 3.2.5 on 2021-09-02 17:54

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import gm2m.fields
import uuid


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('service_admin', '0047_auto_20210902_1752'),
    ]

    operations = [
        migrations.CreateModel(
            name='TabulationField',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='unique ID')),
                ('id_label', models.CharField(blank=True, help_text='For internal use.', max_length=255, null=True)),
                ('label', models.CharField(db_index=True, max_length=40)),
                ('type', models.CharField(choices=[('numeric', 'Numeric'), ('date', 'Date'), ('text', 'Text')], max_length=10, null=True)),
                ('tooltip', models.CharField(max_length=255, null=True)),
                ('nested_metrics', models.JSONField(max_length=20, null=True)),
                ('value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service_admin.metricreference', to_field='metric')),
            ],
            options={
                'verbose_name': 'tabulation field',
                'db_table': 'cms"."tabulation_field',
            },
        ),
        migrations.RunSQL(
            "SELECT create_reference_table('cms.tabulation_field')"
        ),
        migrations.CreateModel(
            name='VisualisationField',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='unique ID')),
                ('id_label', models.CharField(blank=True, help_text='For internal use.', max_length=255, null=True)),
                ('label', models.CharField(db_index=True, max_length=40)),
                ('type', models.CharField(choices=[('line', 'Line'), ('bar', 'Bar'), ('heatmap', 'Heatmap')], max_length=10, null=True)),
                ('colour', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(11)])),
                ('tooltip', models.CharField(max_length=255, null=True)),
                ('fill', models.PositiveSmallIntegerField(help_text='Only applicable to line (area) plots - leave blank for other types.', null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(11)])),
                ('bar_type', models.CharField(choices=[('overlay', 'Overlay'), ('group', 'Group'), ('stack', 'Stack')], help_text='Only applicable to bar plots - leave blank for other types.', max_length=20, null=True)),
                ('amplitude', models.CharField(max_length=20, null=True)),
                ('amplitude_label', models.CharField(max_length=20, null=True)),
                ('metric_label', models.CharField(max_length=20, null=True)),
                ('parameter', models.CharField(help_text='Attribute name for the 3rd dimension.', max_length=20, null=True)),
                ('nested_metrics', models.JSONField(default=dict, max_length=20, null=True)),
                ('highlight', models.ForeignKey(help_text='Only applicable to bar plots - leave blanks for other types.', null=True, on_delete=django.db.models.deletion.CASCADE, to='service_admin.highlight')),
                ('rolling_average', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='service_admin.rollingaverage')),
                ('value', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='service_admin.metricreference', to_field='metric')),
            ],
            options={
                'verbose_name': 'visualisation field',
                'db_table': 'cms"."visualisation_field',
            },
        ),
        migrations.RunSQL(
            "SELECT create_reference_table('cms.visualisation_field')"
        ),
        # migrations.AddField(
        #     model_name='tab',
        #     name='fields',
        #     field=gm2m.fields.GM2MField('service_admin.VisualisationField', 'service_admin.TabulationField', through='service_admin.TabField', through_fields=['tab', 'field', 'field_type', 'field_id']),
        # ),
    ]
