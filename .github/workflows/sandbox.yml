name: Deploy Dashboard Management / Greenhouse App to Sandbox Environment..

on:
 push:
  branches:
   - sandbox

env:
  AZURE_APP_NAME: 'c19dashsbuksfe01greenhouse01' 
  NODE_VERSION: '14.x'
  PYTHON_VERSION: '3.9'
  DATASTORE_STORAGE_ACCOUNT_NAME: 
  

jobs:
 deploy:
  runs-on: ubuntu-latest
  name: Deploy Dashboard Management / Greenhouse App to Sandbox Environment
  environment: sandbox

## declares credentials for Azure Container Registry!!
  steps:
  - name: Login to Azure Container Registry
    uses: azure/docker-login@v1
    with:
      login-server: c19dashacrprod.azurecr.io
      username: ${{ secrets.REGISTRY_USERNAME }}
      password: ${{ secrets.REGISTRY_PASSWORD }}

  - name: 'Checkout GitHub action'
    uses: actions/checkout@v3

  - name: Build Image and Push Image to Azure Container Registry
    run: |
        docker build . -t c19dashacrprod.azurecr.io/greenhouse-server:${{ github.sha }}-sandbox
        docker push c19dashacrprod.azurecr.io/greenhouse-server:${{ github.sha }}-sandbox

  - name: Deploy Container to Azure App Services
    uses: azure/webapps-deploy@v2
    with:
      app-name: ${{ env.AZURE_APP_NAME }}
      publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
      images: 'c19dashacrprod.azurecr.io/greenhouse-server:${{ github.sha }}-sandbox'
    

  - name: Use Nodejs ${{ env.NODE_VERSION }} 
    uses: actions/setup-node@v3
    with:
      node-version: ${{ env.NODE_VERSION }}


  - name: Build Nodejs Code
    shell: bash
    run: |
     cd app/static_private
     npm install
     npm rebuild node-sass
     npm run build


  - name: Setup Python ${{ env.PYTHON_VERSION }} Environment
    uses: actions/setup-python@v1
    with:
     python-version: ${{ env.PYTHON_VERSION }}

  - name: 'Build Python Code'
    shell: bash
    run: |
     python -m pip install -U pip
     python -m pip install -r requirements.txt
     PYTHONPATH=$(pwd)
     cd app
     python simple_manage.py collectstatic \
          --ignore=node_modules --ignore=.sass-cache       \
          --ignore=*.sass --ignore=*.scss --ignore=*.tsx   \
          --ignore=gulpfile.js --ignore=start.js           \
          --ignore=gulp                                    \
          --ignore=*.ts --ignore=*.jsx --ignore=tsconfig.* \
          --ignore=npm* --ignore=._.DS_Store --ignore=_*   \
          --ignore=package.json --ignore=package-lock.json \
          --ignore=.babelrc --ignore=*.log --ignore=*.sh   \
          --noinput
     cd ./app/static/

  - name: Log in with Azure
    uses: azure/login@v1
    with:
     creds: '${{ secrets.AZURE_CREDENTIALS }}'
     enable-AzPSSession: true


  - name: Upload static assets Blob Storage
    uses: Azure/powershell@v1
    with:
      inlineScript: |
        DIR
        #Write-Output "> Initialising for ${{ env.DATASTORE_STORAGE_ACCOUNT_NAME }}"
        
        ## Generate SAS token for the 'publicdata' container
        #$expiry=(Get-Date).AddMinutes(10).ToString("yyyy-MM-ddTHH:mm:ssZ")
        #Write-Output "> Generated expiry timestamp - $expiry"
        #$sas=$(az storage container generate-sas --name static --account-name ${{ env.DATASTORE_STORAGE_ACCOUNT_NAME }} --permissions dlrw --expiry $expiry --auth-mode key -o tsv)
        #Write-Output "> Generated SAS token"

        ## Upload files using the generated SAS token. We are using the sync command of azcopy which removes old files from storage
        #azcopy sync "$(System.DefaultWorkingDirectory)\dashboard-greenhouse-assets" "https://${{ env.DATASTORE_STORAGE_ACCOUNT_NAME }}.blob.core.windows.net/static/admin/?$sas" --recursive --put-md5
        #Write-Output "> Uploaded the blobs"

      azPSVersion: "latest"

#  - name: Upload static assets Blob Storage

#  - name: Set cache-control headers

